var app = angular.module("app", [
	'ngResource',
	'ngRoute',
	'ngAnimate',
	'mobile-angular-ui'
]);

app.run(function($rootScope) {
	$rootScope.user = {};

	// Deal with animations (set $routeProvider.when('/', animateIn: 'fadeInUpBig', animateOut: 'fadeOutDownBig'}))
	$rootScope.routingCount = 0; // Count the number of routes we've made
	$rootScope.$on('$routeChangeStart', function(e, current){
		if (current && $rootScope.routingCount++ == 0) // Force disable initial animation if viewing the page for the first time
			current.animateIn = null;
		$rootScope.animateClass = [
			current && current.animateIn || 'snapIn',
			current && current.animateOut || 'snapOut'
		];
	})
});


app.run(function($rootScope) {
	$rootScope.user = {
		settings: {
			tts: {
				enabled: true,
				countdown: true,
				voice: 0
			}
		}
	};

	$rootScope.timers = [
		/*
		{
			id: String // Unique ID of this timer (used for URL slug)
			title: String // Human friendly name of the timer profile
			description: String // UNSUPPORTED Description of the routine
			routineTime: String // UNSUPPORTED Time the routine should be run for (e.g. '1 week')
			script: [ // Array of script items
				{
					title: String // The display title of the item
					time: Int // Time in seconds to display
					say: Bool|String // If true the title will be said via TTS, if a string it will be passed to TTS
					countdown: Bool // (Default: true), use TTS to announce the countdown
				{
			]
		}
		*/

		{
			id: 'tennisElbow',
			title: 'Tennis Elbow Session 1',
			description: 'Simple Tennis Elbow stretches with the aid of a rubber band. Designed to work with a arm at 90 degrees bend.',
			routineTime: '1 week',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm stress #1',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #2',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #3',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #4',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #1',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #2',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #3',
					time: 60 * 1000,
				},
				{
					title: 'Rest',
					time: 60 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #4',
					time: 60 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		},
		{
			id: 'tennisElbow1Compressed',
			title: 'Tennis Elbow Session 1 (Alternating)',
			description: 'Alternating Tennis Elbow stretches desgigned to reduce the time of the routine. Designed to work with a arm at 90 degrees bend.',
			routineTime: '1 week',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm stress #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #4',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #4',
					time: 60 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		},
		{
			id: 'tennisElbow2',
			title: 'Tennis Elbow Session 2',
			description: 'Straight arm based Tennis Elbow exsorsizes. Stretch arm in \'stopping motion\'.',
			routineTime: '10 days',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm stress #1',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #1',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #2',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #2',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #3',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #3',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Right arm stress #4',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 10 * 1000,
					say: true
				},
				{
					title: 'Left arm stress #4',
					time: 45 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		},
		{
			id: 'tennisElbow3',
			title: 'Tennis Elbow Session 3 (60s)',
			description: '5kg Weight holding exorcizes, twice a day',
			routineTime: '14 days',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm weights #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #4',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #4',
					time: 60 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		},
		{
			id: 'tennisElbow3-45s',
			title: 'Tennis Elbow Session 3 (45s)',
			description: '5kg Weight holding exorcizes, twice a day with lighter 45 second intervals',
			routineTime: '14 days',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm weights #1',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #1',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #2',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #2',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #3',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #3',
					time: 45 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #4',
					time: 45 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #4',
					time: 45 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		},
		{
			id: 'tennisElbow3-60s',
			title: 'Tennis Elbow Session 3 (60s)',
			description: '5kg Weight holding exorcizes, twice a day with 60 second intervals',
			routineTime: '14 days',
			script: [
				{
					title: 'Preperation',
					time: 5 * 1000,
				},
				{
					title: 'Right arm weights #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #1',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #2',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #3',
					time: 60 * 1000,
				},
				{
					title: 'Switch to right arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Right arm weights #4',
					time: 60 * 1000,
				},
				{
					title: 'Switch to left arm',
					time: 5 * 1000,
					say: true
				},
				{
					title: 'Left arm weights #4',
					time: 60 * 1000,
				},
				{
					title: 'Finished',
					say: true,
					countdown: false
				}
			]
		}
	];
});


/**
* PhoneGap specific functionality
*/
document.addEventListener("deviceready", function() {
	// Enable keep awake when in PhoneGap mode
	if (window.plugins && window.plugins.insomnia)
		window.plugins.insomnia.keepAwake();
}, false);


app.config(function($routeProvider, $locationProvider) {
	$routeProvider
		.when('/', {
			templateUrl: "/templates/home.html",
			animateIn: 'zoomIn'
		})
		.when('/timer/:id', {
			templateUrl: "/templates/timer.html",
			animateIn: 'fadeInRightBig'
		})
		.when('/error', {
			templateUrl: "/templates/error.html",
			animateIn: 'fadeInUpBig'
		})
		.when('/settings', {
			templateUrl: "/templates/settings.html",
			animateIn: 'fadeInUpBig',
			animateIn: 'fadeOutDownBig'
		})
});


// App global controller (also $rootScope)
app.controller('globalController', function($scope, $rootScope, $location, $timeout) {
	// TTS {{{
	$scope.hasTTS = false;
	$scope.say = function(text) {
		if (!$scope.user.settings.tts.enabled || !$scope.hasTTS)
			return;
		$scope.synthVoice.text = text;
		window.speechSynthesis.speak($scope.synthVoice);
	};
	$scope.loadVoices = function() {
		$scope.speaking = false;
		if ('speechSynthesis' in window) {
			$scope.hasTTS = true;
			$scope.synthVoice = new SpeechSynthesisUtterance();
			$scope.synthVoice.lang = 'en-US';
			$scope.voices = speechSynthesis.getVoices();
			speechSynthesis.speak($scope.synthVoice);
		}
	};
	$scope.$watch('user.settings.tts.voice', function() {
		if ($scope.hasTTS) {
			console.log('Voice Changed', $scope.user.settings.tts.voice);
			$scope.synthVoice.voice = speechSynthesis.getVoices()[$scope.user.settings.tts.voice];
		}
	});
	// }}}
});

// Load voice data when ready
window.speechSynthesis.onvoiceschanged = function() {
	angular.element($('#globalController')).scope().loadVoices();
};


app.controller('menuController', function($scope, $rootScope, $routeParams) {
});


app.controller('settingsController', function($scope, $rootScope, $routeParams) {
	$scope.testTTS = function() {
		$scope.say('Hello World');
	};
});


app.controller('timerController', function($scope, $rootScope, $routeParams, $location, $filter) {
	$scope.total = null;
	$scope.totalFormatted = null;

	$scope.refresh = function() {
		$scope.timerEnabled = false;
		$scope.timer = _.find($rootScope.timers, {id: $routeParams.id});
		$scope.activeScript = 0;
		for (var s in $scope.timer.script) {
			$scope.timer.script[s].value = $scope.timer.script[s].time;
			$scope.timer.script[s].valueFormatted = $filter('formatTimer')($scope.timer.script[s].value);
		}
		$scope.refreshTotal();
	};
	$scope.refreshTotal = function() {
		var sum = 0;
		for (var s in $scope.timer.script) {
			if ($scope.timer.script[s].value)
				sum += $scope.timer.script[s].value;
		}
		$scope.total = sum;
		$scope.totalFormatted = $filter('formatTimer')(sum);
	};
	$scope.refresh();

	// Watchers {{{
	$scope.activeScript = 0;
	$scope.$watch('activeScript', function() {
		for (var s in $scope.timer.script) {
			$scope.timer.script[s].active = (s == $scope.activeScript);
		}
	});
	// }}}

	if (!$scope.timer) {
		$location.path('/error');
		return;
	}

	$scope.timerEnabled = false;
	$scope.startTimer = function() {
		$scope.timerEnabled = true;
		setTimeout($scope.timerTick, 1000);
	};
	$scope.pauseTimer = function() {
		$scope.timerEnabled = false;
	};
	$scope.stopTimer = function() {
		$scope.refresh();
	};
	$scope.skipTimer = function(offset) {
		$scope.activeScript = offset;
		if ($scope.timer.script[$scope.activeScript].say) { // Say something - true for just repeat title, string otherwise
			if ($scope.timer.script[$scope.activeScript].say === true) { // Boolean true - repeat title
				$scope.say($scope.timer.script[$scope.activeScript].title);
			} else // String - just repeat whatever we're given
				$scope.say($scope.timer.script[$scope.activeScript].say);
		}
	};

	$scope.timerTick = function() {
		$scope.$apply(function() {
			if (!$scope.timerEnabled)
				return;
			var newValue = $scope.timer.script[$scope.activeScript].value - 1000;
			if (newValue <= 0) {
				$scope.timer.script[$scope.activeScript].value = 0;
				$scope.timer.script[$scope.activeScript].valueFormatted = $filter('formatTimer')($scope.timer.script[$scope.activeScript].value);
				$scope.timer.script[$scope.activeScript].active = false;
				$scope.skipTimer($scope.activeScript + 1);
				if ($scope.activeScript < $scope.timer.script.length) // Still more scripts to go
					$scope.timer.script[$scope.activeScript].active = true;
			} else {
				$scope.timer.script[$scope.activeScript].value = newValue;
				// Handle countdowns {{{
				if (typeof $scope.timer.script[$scope.activeScript].countdown == 'undefined' || $scope.timer.script[$scope.activeScript].countdown == true) {
					if ($scope.user.settings.tts.countdown && $scope.timer.script[$scope.activeScript].value <= 1000) {
						$scope.say(1);
					} else if ($scope.user.settings.tts.countdown && $scope.timer.script[$scope.activeScript].value <= 2000) {
						$scope.say(2);
					} else if ($scope.user.settings.tts.countdown && $scope.timer.script[$scope.activeScript].value <= 3000) {
						$scope.say(3);
					}
				}
				// }}}
			}
			$scope.timer.script[$scope.activeScript].valueFormatted = $filter('formatTimer')($scope.timer.script[$scope.activeScript].value);
			$scope.refreshTotal()
			setTimeout($scope.timerTick, 1000);
		});
	};
});


/**
* Directive to dynamically compile an Angular template (from a variable) and render the result into the element
* @author Matt Carter <m@ttcarter.com>
*
* In the controller:
*	$scope.html = "Hello {{name}}";
*
* In HTML:
* 	<div compile="html"></div>
*
*/
app.directive('compile', function($compile) {
	return function(scope, element, attrs) {
		scope.$watch(
			function(scope) {
				return scope.$eval(attrs.compile);
			},
			function(value) {
				element.html(value);
				$compile(element.contents())(scope);
			}
		);
	};
});


/**
* formatTimer
* Convert incomming seconds to a timer format
*
* @author Matt Carter <m@ttcarter.com>
*
*/
var zeroPad = function(no) {
	return (no < 10) ? '0' + no : no;
};
app.filter('formatTimer', function() {
	return function(value) {
		if (!value)
			return;
		var date = new Date(value);
		date.setTime(date.getTime() + date.getTimezoneOffset()*60*1000);
		return (date.getHours() > 0 ? date.getHours() + ':' : '') + date.getMinutes() + ':' + zeroPad(date.getSeconds());
	};
});


/**
* fromEpoc - Convert Unix epocs into data objects
*
* @author Matt Carter <m@ttcarter.com>
*
* Converts a Unix epoc into a Javascript data object
* This function is usually used in pipelines to format an incomming epoc value with a suitable date format
* In your controller:
*	$scope.foo = 1397274589;
*
* In your templating system:
*	{{foo | fromEpoc | date}}
*
* Will output: 'Apr 12, 2014' (see the 'date' filter docs for other formats)
*/
app.filter('fromEpoc', function() {
	return function(value) {
		if (!value)
			return;
		var date = new Date(value*1000);
		return date;
	};
});


/**
* niceDate - Convert a unix epoch into a readable date/time string
* This plugin is designed to work with no dependencies - hence the mess of date/time formatting
*
* @author Matt Carter <m@ttcarter.com>
*
*/
var zeroPad = function(no) {
	return (no < 10) ? '0' + no : no;
};
app.filter('niceDate', function() {
	return function(value) {
		if (!value)
			return;
		var date = new Date(value*1000);
		var now = new Date();
		if (date.getFullYear() != now.getFullYear() || date.getMonth() != now.getMonth() || date.getDate() != now.getDate()) { // Occured on a different date
			return date.getHours() + ':' + zeroPad(date.getMinutes()) + ' ' + date.getDate() + '/' + date.getMonth() + '/' + date.getYear();
		} else if (date.getHours() < 12) { // Occured this morning
			return date.getHours() + ':' + zeroPad(date.getMinutes()) + ' am';
		} else if (date.getHours() >= 12) { // Occurred this afternoon
			return (date.getHours() - 12) + ':' + zeroPad(date.getMinutes()) + ' pm';
		}
		return 'unknown';
	};
});


/**
* pretty - Basic pretty printer
*
* @author Matt Carter <m@ttcarter.com>
*
* This function can be used to pretty print objects or JSON streams
*
* In your templating system:
*	{{foo | pretty}}
*
*/
app.filter('pretty', function() {
	return function(value) {
		if (!value) {
			return 'null';
		} else if (typeof value == 'object') {
			return JSON.stringify(value, null, '\t');
		} else {
			return value.toString(); // FIXME: Stub, this should be improved on
		}
	};
});


/**
* Provides a simple filter to transform text so that all first letters in words is in upper case
*
* For example:
*
* In your controller:
*	$scope.foo = 'hello world'
*
* In your templating system:
*	{{foo | ucwords}}
*
* Will output: 'Hello World'
*/
app.filter('ucwords', function() {
	return function(value) {
		if (!value)
			return;
		return value.replace(/\b([a-z])/g, function(all,first) {
			return first.toUpperCase();
		});
	};
});


/**
* jQuery fix to make any ng-Switch control (<switch>) embedded within a a.form-group element clickable /anywhere/ not just on the actual switch itself.
* This makes it possible to click on the switches label to toggle the switch
*
*
*	<a class="form-group row">
*		<label class="control-label col-xs-9 col-sm-10 col-lg-11">Foo Switch</label>
*		<div class="form-control-wrapper col-xs-3 col-sm-2 col-lg-1">
*			<switch ng-model="fooModel"/>
*		</div>
*	</a>
*
* @author Matt Carter <m@ttcarter.com>
* @date 2014-07-26
*
*/
$(function() {
	$(document)
		.on('click', '.form-group .switch', function(e) {
			e.stopPropagation(); // Prevent the switch from bubbling events upwards or we get stuck in an inf loop
		})
		.on('click', '.form-group', function(e) {
			$(this).find('.switch').trigger('click');
		});
});


//# sourceMappingURL=all.min.js.map
angular.module("app").run(["$templateCache", function($templateCache) {$templateCache.put("/templates/error.html","<div class=\"alert alert-warning pad\">\n	<h3>Oops, something went wrong</h3>\n	<p>We\'re not sure whats going on here but you seem to have requested a link thats invalid.</p>\n</div>\n");
$templateCache.put("/templates/home.html","<!-- Header {{{ -->\n<div class=\"navbar navbar-app navbar-absolute-top\">\n	<div class=\"navbar-brand navbar-brand-center\">\n		<span>EccentricTimer</span>\n	</div>\n\n	<div class=\"btn-group pull-left\">\n		<div ng-click=\"toggle(\'mainSidebar\')\" class=\"btn btn-navbar sidebar-toggle\">\n			<i class=\"fa fa-bars\"></i> Menu\n		</div>\n	</div>\n</div>\n<!-- }}} -->\n<!-- Body -->\n<div class=\"app-body\"><div class=\"app-content\">\n\n<div class=\"scrollable\">\n	<div class=\"scrollable-content\">\n\n		<div class=\"row pad-top-xl\">\n			<div class=\"text-center\">\n				<img class=\"logo\" src=\"img/logo.png\"/>\n			</div>\n		</div>\n\n		<div class=\"row pad-bottom-xs\" ng-repeat=\"timer in timers track by timer.id\">\n			<a ng-href=\"#/timer/{{timer.id}}\" class=\"btn btn-lg btn-success col-xs-10 col-xs-offset-1 col-sm-4 col-sm-offset-4\">\n				<div icon=\"{{item.icon}}\"></div>\n				{{timer.title}}\n				<i class=\"fa fa-chevron-right pull-right\"></i>\n			</a>\n		</div>\n	</div>\n</div>\n\n</div></div>\n<!-- }}} -->\n");
$templateCache.put("/templates/settings.html","<span ng-controller=\"settingsController\">\n<!-- Header {{{ -->\n<div class=\"navbar navbar-app navbar-absolute-top\">\n	<div class=\"navbar-brand navbar-brand-center\">\n		<span>Settings</span>\n	</div>\n\n	<div class=\"btn-group pull-left\">\n		<div ng-click=\"toggle(\'mainSidebar\')\" class=\"btn btn-navbar sidebar-toggle\">\n			<i class=\"fa fa-bars\"></i> Menu\n		</div>\n	</div>\n</div>\n<!-- }}} -->\n<!-- Body -->\n<div class=\"app-body\"><div class=\"app-content\">\n\n<div class=\"scrollable\">\n	<div class=\"scrollable-content\">\n		<div class=\"panel\">\n			<div class=\"panel-heading\">\n				<h2 class=\"panel-title\">General display</h2>\n			</div>\n			<div class=\"panel-body\">\n				<div class=\"form-group row\">\n					<label class=\"control-label col-xs-9 col-sm-10 col-lg-11\">Show bottom navigation bar</label>\n					<div class=\"form-control-wrapper col-xs-3 col-sm-2 col-lg-1\">\n						<switch ng-model=\"user.settings.navShowBottomBar\"/>\n					</div>\n				</div>\n			</div>\n		</div>\n		<div class=\"panel\">\n			<div class=\"panel-heading\">\n				<h2 class=\"panel-title\">Text-to-speach</h2>\n			</div>\n			<div class=\"panel-body\">\n				<div ng-show=\"!hasTTS\" class=\"alert alert-warning\">\n					<h3>TTS Unsupported</h3>\n					<p>Sorry but this device doesnt seem to support text-to-speach.</p>\n				</div>\n				<div ng-show=\"hasTTS\" class=\"form-group row\">\n					<label class=\"control-label col-xs-9 col-sm-10 col-lg-11\">Enable TTS</label>\n					<div class=\"form-control-wrapper col-xs-3 col-sm-2 col-lg-1\">\n						<switch ng-model=\"user.settings.tts.enabled\"/>\n					</div>\n				</div>\n				<div ng-show=\"hasTTS\" class=\"form-group row\">\n					<label class=\"control-label col-xs-9 col-sm-10 col-lg-11\">Enable Countdowns</label>\n					<div class=\"form-control-wrapper col-xs-3 col-sm-2 col-lg-1\">\n						<switch ng-model=\"user.settings.tts.countdown\"/>\n					</div>\n				</div>\n				<div ng-show=\"hasTTS\" class=\"form-group row\">\n					<label class=\"control-label col-lg-2\">Voice</label>\n					<div class=\"form-control-wrapper col-lg-10\">\n						<select class=\"form-control\" ng-model=\"user.settings.tts.voice\">\n							<option ng-repeat=\"voice in voices\" ng-value=\"$index\">{{voice.name}}</option>\n						</select>\n					</div>\n				</div>\n				<div ng-show=\"hasTTS\" class=\"form-group row text-center\">\n					<a ng-click=\"testTTS()\" class=\"btn btn-info\"><i class=\"fa\" ng-class=\"speaking ? \'fa-pause\' : \'fa-play\'\"></i> Test TTS</a>\n				</div>\n			</div>\n		</div>\n	</div>\n</div>\n\n</div></div>\n<!-- }}} -->\n</span>\n");
$templateCache.put("/templates/timer.html","<span ng-controller=\"timerController\">\n<!-- Header {{{ -->\n<div class=\"navbar navbar-app navbar-absolute-top\">\n	<div class=\"navbar-brand navbar-brand-center\">\n		<span>\n			{{timer.title}}\n		</span>\n	</div>\n\n	<div class=\"btn-group pull-left\">\n		<div ng-click=\"toggle(\'mainSidebar\')\" class=\"btn btn-navbar sidebar-toggle\">\n			<i class=\"fa fa-bars\"></i> Menu\n		</div>\n	</div>\n\n	<div class=\"btn-group pull-right\">\n		<div class=\"btn btn-navbar\">\n			<span class=\"badge badge-default\">{{totalFormatted}}</span>\n		</div>\n	</div>\n</div>\n<!-- }}} -->\n<!-- Body -->\n<div class=\"app-body\"><div class=\"app-content\">\n\n<div class=\"scrollable\">\n	<div class=\"scrollable-content\">\n		<div class=\"list-group\">\n			<a ng-click=\"skipTimer($index)\" ng-repeat=\"item in timer.script\" class=\"list-group-item\" ng-class=\"item.active && \'active\'\">\n				<i ng-show=\"item.active\" class=\"fa fa-arrow-right\"></i>\n				{{item.title}}\n				<span class=\"badge badge-timer pull-right\" ng-class=\"item.active ? \'badge-warning\' : \'badge-default\'\">{{item.valueFormatted}}</span>\n			</a>\n		</div>\n	</div>\n</div>\n\n</div></div>\n<!-- }}} -->\n<!-- Footer {{{ -->\n<div class=\"navbar navbar-app navbar-absolute-bottom\">\n	<div class=\"btn-group justified\">\n		<a ng-show=\"!timerEnabled\" ng-click=\"startTimer()\" class=\"btn btn-navbar btn-icon-only\"><i class=\"fa fa-play fa-navbar\"></i></a>\n		<a ng-show=\"timerEnabled\" ng-click=\"pauseTimer()\" class=\"btn btn-navbar btn-icon-only\"><i class=\"fa fa-pause fa-navbar\"></i></a>\n		<a ng-click=\"stopTimer()\" class=\"btn btn-navbar btn-icon-only\"><i class=\"fa fa-stop fa-navbar\"></i></a>\n	</div>\n</div>\n<!-- }}} -->\n</span>\n");}]);